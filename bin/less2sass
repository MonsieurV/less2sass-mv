#!/usr/bin/env node

const program = require("commander");
const path = require("path");
const fs = require("fs");
const less2sass = require("..");
const mkdir = require("mkdirp").sync;

/**
 * Helpers.
 */

function log(type, msg, color) {
  color = color || "36";
  const w = 10;
  const len = Math.max(0, w - type.length);
  const pad = Array(len + 1).join(" ");
  console.log(
    "  \033[" + color + "m%s\033[m : \033[90m%s\033[m",
    pad + type,
    msg
  );
}

function info(type, msg) {
  log(type, msg);
}

function warn(type, msg) {
  log(type, msg, "33");
}

function error(type, msg) {
  log(type, msg, "31");
}

function write(path, str) {
  if (fs.existsSync(path)) {
    warn("exists", path);
  } else {
    log("create", path, "32");
    fs.writeFileSync(path, str);
  }
}

function isLessFile(filename) {
  return /\.less$/.test(filename);
}

function convert(filePath, outDir = null, initialFilePath = null) {
  info("processing", filePath);

  const buffer = fs.readFileSync(filePath);
  const output = less2sass.convert(buffer.toString());
  let newPath = filePath;

  if (outDir && initialFilePath) {
    const rootDir = process.cwd();
    const fileDirectory = fs.statSync(initialFilePath).isDirectory()
      ? initialFilePath
      : path.dirname(initialFilePath);
    const filePathRelative = path.relative(
      path.join(rootDir, fileDirectory),
      filePath
    );

    newPath = path.join(rootDir, outDir, filePathRelative);
  }

  newPath = newPath.replace(/\.less$/, ".scss");

  // make sure the new path directory exists in case it is nested
  mkdir(path.dirname(newPath));

  write(newPath, output);
}

/**
 * Usage.
 */

program
  .option("-d, --directory <value>", "Directory to output Scss files")
  .version(require("../package.json").version)
  .usage("[options] <less file or directory>");

/**
 * Parse.
 */
program.parse(process.argv);

// args void of file path

const args = process.argv.slice(3);

// command
if (program.args[0] === undefined) {
  error("fail", "You must provide a file path");

  program.help();
}

function read(filePath, outDir, initialFilePath) {
  const fullPath = path.resolve(process.cwd(), filePath);
  const stats = fs.statSync(fullPath);
  info("scanning", fullPath);

  if (isLessFile(fullPath)) {
    convert(fullPath, outDir, initialFilePath);
  } else if (stats.isDirectory()) {
    const files = fs.readdirSync(fullPath);

    for (let i = 0; i < files.length; i++) {
      read(path.join(fullPath, files[i]), outDir, initialFilePath);
    }
  }
}

const options = program.opts();
read(program.args[0], options.directory, program.args[0]);
